# -*- coding: utf-8 -*-
# Generated by Django 1.10.5 on 2017-02-26 16:25
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import restapi.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('restapi', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Data_Store',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('write_date', models.DateTimeField(auto_now=True)),
                ('data', models.BinaryField()),
                ('data_nonce', models.CharField(max_length=64, verbose_name='data nonce')),
                ('type', models.CharField(db_index=True, default=b'password', max_length=64)),
                ('description', models.CharField(default=b'default', max_length=64)),
                ('secret_key', models.CharField(max_length=256, verbose_name='secret key')),
                ('secret_key_nonce', models.CharField(max_length=64, verbose_name='secret key nonce')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('write_date', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Group_User_Right',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('write_date', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(help_text='The (public or secret) encrypted key with which the share is encrypted.', max_length=256, verbose_name='Key')),
                ('key_nonce', models.CharField(max_length=64, verbose_name='Key nonce')),
                ('read', models.BooleanField(default=True, help_text='Designates whether this user has "read" rights and can read shares of this group', verbose_name='read right')),
                ('write', models.BooleanField(default=False, help_text='Designates whether this user has "write" rights and can update shares of this group', verbose_name='wright right')),
                ('add_share', models.BooleanField(default=False, help_text='Designates whether this user has "add share" rights and can add shares to this group', verbose_name='add share right')),
                ('remove_share', models.BooleanField(default=False, help_text='Designates whether this user has "remove share" rights and can remove shares of this group', verbose_name='remove share right')),
                ('grant', models.BooleanField(default=False, help_text='Designates whether this user has "grant" rights and can add users and rights of users of thisgroup. The user is limited by his own rights, so e.g. he cannot grant write if he does not have write on his own.', verbose_name='grant right')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_share_rights', to='restapi.Group')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Recovery_Code',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('write_date', models.DateTimeField(auto_now=True)),
                ('recovery_authkey', models.CharField(max_length=128, verbose_name='recovery auth key')),
                ('recovery_data', models.BinaryField()),
                ('recovery_data_nonce', models.CharField(max_length=64, unique=True, verbose_name='recovery data nonce')),
                ('verifier', models.CharField(max_length=256, verbose_name='last verifier')),
                ('verifier_issue_date', models.DateTimeField(blank=True, null=True)),
                ('recovery_sauce', models.CharField(max_length=64, verbose_name='user sauce')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Secret',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('write_date', models.DateTimeField(auto_now=True)),
                ('data', models.BinaryField()),
                ('data_nonce', models.CharField(max_length=64, unique=True, verbose_name='data nonce')),
                ('type', models.CharField(db_index=True, default=b'password', max_length=64)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Secret_Link',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('write_date', models.DateTimeField(auto_now=True)),
                ('link_id', models.UUIDField(unique=True)),
                ('parent_datastore', models.ForeignKey(help_text='The datastore, where this link ends', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_links', to='restapi.Data_Store')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Share',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('write_date', models.DateTimeField(auto_now=True)),
                ('data', models.BinaryField()),
                ('data_nonce', models.CharField(max_length=64, verbose_name='data nonce')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Share_Tree',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('write_date', models.DateTimeField(auto_now=True)),
                ('path', restapi.fields.LtreeField(help_text='The ltree path to this share', unique=True)),
                ('parent_datastore', models.ForeignKey(help_text='The datastore, where this link ends', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_share_trees', to='restapi.Data_Store')),
                ('parent_share', models.ForeignKey(help_text='The share, where this link ends and gets its permissions from', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_share_trees', to='restapi.Share')),
                ('share', models.ForeignKey(help_text='The share that this link grants permissions to', on_delete=django.db.models.deletion.CASCADE, related_name='share_trees', to='restapi.Share')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Token',
            fields=[
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('key', models.CharField(max_length=128, primary_key=True, serialize=False)),
                ('secret_key', models.CharField(max_length=64)),
                ('user_validator', models.CharField(max_length=64, null=True)),
                ('active', models.BooleanField(default=False, help_text='Specifies if the token has already been activated', verbose_name='Activated')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('write_date', models.DateTimeField(auto_now=True)),
                ('username', models.EmailField(max_length=254, unique=True, verbose_name='Username')),
                ('email', models.CharField(max_length=512, unique=True, verbose_name='email address')),
                ('email_bcrypt', models.CharField(max_length=60, unique=True, verbose_name='bcrypt of email address')),
                ('authkey', models.CharField(max_length=128, verbose_name='auth key')),
                ('public_key', models.CharField(max_length=256, verbose_name='public key')),
                ('private_key', models.CharField(max_length=256, verbose_name='private key')),
                ('private_key_nonce', models.CharField(max_length=64, unique=True, verbose_name='private key nonce')),
                ('secret_key', models.CharField(max_length=256, verbose_name='secret key')),
                ('secret_key_nonce', models.CharField(max_length=64, unique=True, verbose_name='secret key nonce')),
                ('is_email_active', models.BooleanField(default=False, help_text='Designates whether this email should be treated as active. Unselect this if the user registers a new email.', verbose_name='email active')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('user_sauce', models.CharField(max_length=64, verbose_name='user sauce')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User_Share_Right',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('create_date', models.DateTimeField(auto_now_add=True)),
                ('write_date', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(help_text='The public (yet encrypted) title of the share right.', max_length=512, null=True, verbose_name='Title')),
                ('title_nonce', models.CharField(max_length=64, null=True, verbose_name='Title nonce')),
                ('type', models.CharField(help_text='The public (yet encrypted) type of the share right.', max_length=512, null=True, verbose_name='Type')),
                ('type_nonce', models.CharField(max_length=64, null=True, verbose_name='Type nonce')),
                ('key', models.CharField(help_text='The (public or secret) encrypted key with which the share is encrypted.', max_length=256, verbose_name='Key')),
                ('key_nonce', models.CharField(max_length=64, verbose_name='Key nonce')),
                ('key_type', models.CharField(default=b'asymmetric', help_text='Key type, either "symmetric", or "asymmetric"', max_length=16, verbose_name='Key type')),
                ('read', models.BooleanField(default=True, help_text='Designates whether this user has "read" rights and can read this share', verbose_name='Read right')),
                ('write', models.BooleanField(default=False, help_text='Designates whether this user has "write" rights and can update this share', verbose_name='Write right')),
                ('grant', models.BooleanField(default=False, help_text='Designates whether this user has "grant" rights and can re-share this share', verbose_name='Grant right')),
                ('accepted', models.BooleanField(default=None, null=True, help_text='Defines if the share has been accepted, declined, or still waits for approval', verbose_name='Accepted')),
                ('owner', models.ForeignKey(help_text='The guy who created this share right', on_delete=django.db.models.deletion.CASCADE, related_name='own_user_share_rights', to='restapi.User')),
                ('share', models.ForeignKey(help_text='The share that this share right grants permissions to', on_delete=django.db.models.deletion.CASCADE, related_name='user_share_rights', to='restapi.Share')),
                ('user', models.ForeignKey(help_text='The guy who will receive this share right', on_delete=django.db.models.deletion.CASCADE, related_name='foreign_user_share_rights', to='restapi.User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='token',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='auth_tokens', to='restapi.User'),
        ),
        migrations.AddField(
            model_name='share',
            name='user',
            field=models.ForeignKey(help_text='The share user is always the same as the group user, so the group user always keeps full control.', on_delete=django.db.models.deletion.CASCADE, related_name='shares', to='restapi.User'),
        ),
        migrations.AddField(
            model_name='secret_link',
            name='parent_share',
            field=models.ForeignKey(help_text='The share, where this link ends and gets its permissions from', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parent_links', to='restapi.Share'),
        ),
        migrations.AddField(
            model_name='secret_link',
            name='secret',
            field=models.ForeignKey(help_text='The Secret, that this link links to.', on_delete=django.db.models.deletion.CASCADE, related_name='links', to='restapi.Secret'),
        ),
        migrations.AddField(
            model_name='secret',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='secrets', to='restapi.User'),
        ),
        migrations.AddField(
            model_name='recovery_code',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recovery_code', to='restapi.User'),
        ),
        migrations.AddField(
            model_name='group_user_right',
            name='owner',
            field=models.ForeignKey(help_text='The guy who created this share', on_delete=django.db.models.deletion.CASCADE, related_name='own_group_shares', to='restapi.User'),
        ),
        migrations.AddField(
            model_name='group_user_right',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_share_rights', to='restapi.User'),
        ),
        migrations.AddField(
            model_name='group',
            name='shares',
            field=models.ManyToManyField(related_name='groups', to='restapi.Share'),
        ),
        migrations.AddField(
            model_name='group',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='restapi.User'),
        ),
        migrations.AddField(
            model_name='data_store',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_stores', to='restapi.User'),
        ),
        migrations.AlterUniqueTogether(
            name='user_share_right',
            unique_together=set([('user', 'share')]),
        ),
        migrations.AlterUniqueTogether(
            name='data_store',
            unique_together=set([('user', 'type', 'description')]),
        ),
    ]
