import nacl.encoding

from django.utils import timezone
from rest_framework import serializers
from rest_framework.exceptions import PermissionDenied
from rest_framework.serializers import ValidationError


class DeviceCodeExpiredError(PermissionDenied):
    """Custom exception to specifically identify device code expiration errors."""
    pass


class ClaimDeviceCodeSerializer(serializers.Serializer):
    """
    Serializer for claiming a device code by providing encrypted credentials.
    Includes credentials and nonce in the output.
    """
    # --- Input fields --- 
    # We mark the input field write_only=True to avoid conflicts with the output field
    encrypted_credentials_input = serializers.CharField(
        write_only=True, # Only used for input validation
        required=True, 
        allow_blank=False, 
        style={'base_template': 'textarea.html'}, 
        help_text="Hex-encoded encrypted credentials (keys and token)."
    )
    encrypted_credentials_nonce = serializers.CharField(
        # This field is used for both input validation and output serialization
        required=True, 
        allow_blank=False, 
        max_length=64, 
        help_text="Hex-encoded nonce used for encryption."
    )

    # --- Output fields (Read Only) --- 
    state = serializers.CharField(read_only=True)
    user = serializers.PrimaryKeyRelatedField(read_only=True)
    server_public_key = serializers.CharField(read_only=True, max_length=128, help_text="Hex-encoded public key generated by the server.")
    user_public_key = serializers.CharField(read_only=True, max_length=128, help_text="Hex-encoded public key of the initiating user/device.")
    # Use SerializerMethodField to control the output format of the binary data
    encrypted_credentials = serializers.SerializerMethodField(read_only=True, help_text="Hex-encoded encrypted credentials.")
    # encrypted_credentials_nonce is automatically included as it's not write_only

    def get_encrypted_credentials(self, obj):
        """ Encodes the binary credentials back to hex for the response. """
        if obj.encrypted_credentials:
            return nacl.encoding.HexEncoder.encode(obj.encrypted_credentials).decode()
        return None

    def _validate_hex_string(self, value, field_name):
        """ Helper function to validate a hex string using nacl's HexEncoder. """
        try:
            nacl.encoding.HexEncoder.decode(value)
        except Exception:
            raise serializers.ValidationError("NO_VALID_HEX")

        return value

    def validate(self, data):
        instance = self.instance
        user = self.context.get('user')
        
        if not instance:
            raise ValidationError("DEVICE_CODE_INSTANCE_REQUIRED")
        
        if not user:
            raise ValidationError("USER_AUTHENTICATION_REQUIRED")
        
        # Validate encrypted_credentials_input field
        credentials_input = data.get('encrypted_credentials_input', '')
        try:
            self._validate_hex_string(credentials_input, "Encrypted credentials")
        except ValidationError as e:
            raise ValidationError({"encrypted_credentials_input": e.detail})
        
        credentials_nonce = data.get('encrypted_credentials_nonce', '')
        try:
            self._validate_hex_string(credentials_nonce, "Nonce")
        except ValidationError as e:
            raise ValidationError({"encrypted_credentials_nonce": e.detail})
        
        if instance.user is not None and instance.user != user:
            raise PermissionDenied("DEVICE_CODE_USER_MISMATCH")

        if instance.state != instance.DeviceCodeState.PENDING:
            raise PermissionDenied("DEVICE_CODE_ALREADY_CLAIMED")
        
        if instance.valid_till < timezone.now():
            raise DeviceCodeExpiredError("DEVICE_CODE_EXPIRED")
        
        try:
            credentials_bytes = nacl.encoding.HexEncoder.decode(credentials_input)
            # Store the converted bytes in validated data for later use
            data['_credentials_bytes'] = credentials_bytes
        except Exception:
            raise ValidationError({"encrypted_credentials_input": "NO_VALID_HEX"})
        
        return data 